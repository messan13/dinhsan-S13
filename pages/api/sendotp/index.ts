import { NextApiRequest,NextApiResponse } from "next";
import nodemailer from 'nodemailer';
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();
const otpStorage: { [email: string]: { otp: string; expiresAt: number } } = {};
export default async function handlerNodemail(req:NextApiRequest,res:NextApiResponse){
    if(req.method==="POST"){
        const {email} = req.body;
        if (!email) {
            return res.status(400).json( 'B·∫°n ch∆∞a nh·∫≠p email!');
        }
        const checkemail = await prisma.user.findFirst({where:{email:email}})
        if(!checkemail){
            return res.status(400).json("Email c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c d√πng ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n!")
        }
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        const expiresAt = Date.now() + 5 * 60 * 1000; // 1 ph√∫t
         const ObjectDate = new Date(expiresAt)
        await prisma.oTP.create({
            data: { email, otp, expiresAt:ObjectDate },
          });

        otpStorage[email] = { otp, expiresAt };
        const transporter = nodemailer.createTransport({
            host:process.env.SMTP_HOST,
            port:Number(process.env.SMTP_PORT),
            auth :{
                user:process.env.EMAIL_USER,
                pass:process.env.EMAIL_PASS
            },
        })
        const mailOptions ={
            from :process.env.EMAIL_USER,
            to : email,
            subject:`Xin ch√†o ${checkemail.name}`,
            text :`B·∫°n v·ª´a y√™u c·∫ßu m√£ x√°c th·ª±c OTP ƒë·ªÉ ƒëƒÉng nh·∫≠p/t·∫°o giao d·ªãch tr√™n Sanova. Vui l√≤ng s·ª≠ d·ª•ng m√£ d∆∞·ªõi ƒë√¢y:  
üîë **M√£ OTP c·ªßa b·∫°n: "${otp}"**.
L∆∞u √Ω:  
- M√£ OTP ch·ªâ c√≥ hi·ªáu l·ª±c trong 1 ph√∫t.  
- Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.  
- N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá 0945375009.  
Tr√¢n tr·ªçng,
ChƒÉm s√≥c kh√°ch h√†ng sanova
li√™n h·ªá h·ªó tr·ª£ :0945375009
                     `,
        }
        try {
            await transporter.sendMail(mailOptions);
            return res.status(200).json( 'g·ª≠i m√£ otp th√†nh c√¥ng');
        } catch (error) {
            return res.status(500).json( 'L·ªói khi g·ª≠i OTP'+ error );
        }
    
    }

}